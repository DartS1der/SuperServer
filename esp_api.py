from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import Optional
from datetime import datetime
from sqlalchemy.orm import Session
from database import SessionLocal
from models import Device, Task

router = APIRouter()

# üì¶ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üì• –ß—Ç–æ ESP32 –ø—Ä–∏—Å—ã–ª–∞–µ—Ç
class ESPRequest(BaseModel):
    device_id: str

# üì§ –ß—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–¥–∞—ë—Ç ESP32
class ESPTaskResponse(BaseModel):
    start_time: str  # ISO-8601 —Å—Ç—Ä–æ–∫–∞
    duration_sec: int

# üì° –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á–∏ –ø–æ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
@router.post("/get_task", response_model=ESPTaskResponse)
def get_task(request: ESPRequest, db: Session = Depends(get_db)):
    # –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ ID
    device = db.query(Device).filter_by(device_id=request.device_id).first()
    if not device:
        raise HTTPException(status_code=404, detail="Device not found")

    # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    task = db.query(Task).filter_by(device_id=device.id).first()
    if not task:
        raise HTTPException(status_code=404, detail="No task assigned")

    return ESPTaskResponse(
        start_time=task.start_time.isoformat(),
        duration_sec=task.duration_sec
    )
